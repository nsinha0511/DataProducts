validating_pca <- cbind(validatingdata[,1],validX_PCA1)
colnames(validating_pca) <- c("Tag","Dim1","Dim2","Dim3","Dim4","Dim5","Dim6","Dim7","Dim8","Dim9","Dim10")
head(validating_pca)
head(validating_pca)
predicted_treemodel_pca_val <- cbind(predict(treemodel_pca,as.data.frame(validatingdata_pca),type='class'),as.data.frame(validatingdata_pca))
names(predicted_treemodel_pca_val)[1] <- "predicted_treemodel_val_pca"
predicted_treemodel_pca_val <- cbind(predict(treemodel_pca,as.data.frame(validating_pca),type='class'),as.data.frame(validating_pca))
names(predicted_treemodel_pca_val)[1] <- "predicted_treemodel_val_pca"
head(predicted_treemodel_pca_val)
table(predicted_treemodel_pca_val[,2],predicted_treemodel_pca_val[,1])
accuracy <- sqldf("select cast((100* sum(case when predicted_treemodel_pca_val == Tag then 1 end)/count(*)) as decimal(10,2)) [Accuracy] from predicted_treemodel_pca_val")
accuracy
accuracy <- sqldf("select cast((100* sum(case when predicted_treemodel_val_pca == Tag then 1 end)/count(*)) as decimal(10,2)) [Accuracy] from predicted_treemodel_pca_val")
accuracy
library(nnet)
multinomial.model <- mmulti(factor(Tag)~.,data=as.data.frame(training_pca))
multinomial.model <- multinom(factor(Tag)~.,data=as.data.frame(training_pca))
multinomial.model
predicted_training_multi <- cbind(predict(multinomial.model,as.data.frame(training_pca),type='class'),as.data.frame(training_pca))
names(predicted_training_multi)[1] <- "predicted_training_multi"
summary(predicted_training_multi[,1])
table(predicted_training_multi[,2],predicted_training_multi[,1])
accuracy <- sqldf("select cast((100* sum(case when predicted_training_multi == Tag then 1 end)/count(*)) as decimal(10,2)) [Accuracy]
from predicted_training_multi")
accuracy
predicted_multi_val <- cbind(predict(multinomial.model,as.data.frame(validatingdata)),as.data.frame(validatingdata))
library(shiny)
runExample("01_hello")
pwd
getwd()
runApp("~/shinyapp")
head(trainX)
corpus <- Corpus(VectorSource(trainX$Text))
library(caTools)
library(tm)
library(rpart)
library(rpart.plot)
library(ROCR)
corpus <- Corpus(VectorSource(trainX$Text))
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, stemDocument)
# Create matrix
dtm = DocumentTermMatrix(corpus)
# Remove sparse terms
dtm = removeSparseTerms(dtm, 0.96)
# Create data frame
labeledTerms = as.data.frame(as.matrix(dtm))
View(labeledTerms)
View(labeledTerms)
labeledTerms <- cbind(labeledTerms,trainY$Tag)
View(labeledTerms)
View(labeledTerms)
CART = rpart(trainY$Tag ~., data=labeledTerms, method="class")
CART
str(CART)
predictedCART <- predict(CART,labeledTerms,method='class')
View(predictedCART)
View(predictedCART)
predictedCART <- cbind(predictedCART,trainY$Tag)
View(predictedCART)
View(predictedCART)
predictedCART <- predict(CART,labeledTerms,type='class')
predictedCART <- cbind(predictedCART,trainY$Tag)
View(predictedCART)
View(predictedCART)
predictedCART <- predict(CART,labeledTerms,type='class')
head(predictedCART)
summary(predictedCART)
summary(trainY)
CART = rpart(trainY$Tag ~., data=labeledTerms, method="class")
CART
labeledTerms <- cbind(labeledTerms,trainY$Tag)
head(labeledTerms)
labeledTerms = as.data.frame(as.matrix(dtm))
# Add in the outcome variable
labeledTerms <- cbind(labeledTerms,trainY$Tag)
head(labeledTerms)
rename(labeledTerms,c=("trainY$Tag"="Tag"))
library(plyr)
rename(labeledTerms,c=("trainY$Tag"="Tag"))
rename(labeledTerms,c("trainY$Tag"="Tag"))
CART = rpart(Tag ~., data=labeledTerms, method="class")
rename(labeledTerms,c("trainY$Tag"="Tag"))
labeledTerms <- rename(labeledTerms,c("trainY$Tag"="Tag"))
#Build CART Model
CART = rpart(Tag ~., data=labeledTerms, method="class")
CART
str(CART)
predictedCART <- predict(CART,labeledTerms,type='class')
head(predictedCART)
summary(predictedCART)
summary(trainY)
predictedCART <- cbind(predictedCART,trainY$Tag)
head(predictedCART)
ames(predictedCART)[2] <- "Tag"
names(predictedCART)[2] <- "Tag"
head(predictedCART)
head(predictedCART)
names(predictedCART)[2] <- "Tag"
head(predictedCART)
table(predictedCART[,1],predictedCART[,2])
pcainfo <- PCA(subset(labeledTerms,select=-c(Tag)), ncp=10,graph = FALSE)
pcainfo$eig
library(FactoMineR)
pcainfo <- PCA(subset(labeledTerms,select=-c(Tag)), ncp=10,graph = FALSE)
pcainfo$eig
pcainfo <- PCA(subset(labeledTerms,select=-c(Tag)), ncp=10,graph = TRUE)
dim1 <- pcainfo$var$coord
pcainfo <- PCA(subset(labeledTerms,select=-c(Tag)), ncp=100,graph = TRUE)
pcainfo$eig
dim1 <- pcainfo$var$coord
trainX_PCA1 <- subset(labeledTerms,select=-c(Tag)) %*% dim1
head(dim1)
trainX_PCA1 <- subset(labeledTerms,select=-c(Tag)) %*% dim1
dim1 <- as.matrix(pcainfo$var$coord)
trainX_PCA1 <- subset(labeledTerms,select=-c(Tag)) %*% dim1
trainX_PCA1 <- as.matrix(subset(labeledTerms,select=-c(Tag))) %*% dim1
training_pca <- cbind(trainingdata[,1],trainX_PCA1)
head(training_pca)
head(trainX_PCA1)
head(training_pca)
dim(training_pca)
CART_PCA = rpart(Tag ~., data=training_pca, method="class")
CART_PCA = rpart(Tag ~., data=as.data.frame(training_pca), method="class")
str(training_pca)
colnames(training_pca) <- c("Tag")
names(training_pca[,1]) <- c("Tag")
head(training_pca)
str(training_pca)
names(training_pca)[1]) <- c("Tag")
names(training_pca)[1] <- c("Tag")
head(training_pca)
dim(training_pca)
head(trainX_PCA1)
str(training_pca)
trainX_PCA1 <- as.matrix(subset(labeledTerms,select=-c(Tag))) %*% dim1
training_pca <- cbind(trainingdata[,1],trainX_PCA1)
names(training_pca)[1] <- "Tag"
str(training_pca)
head(training_pca)
CART_PCA = rpart(training_pca[,1] ~., data=as.data.frame(training_pca), method="class")
CART_PCA
CART_PCA = rpart(training_pca[,1] ~., data=training_pca, method="class")
dtm = DocumentTermMatrix(corpus)
labeledTerms = as.data.frame(as.matrix(dtm))
# Add in the outcome variable
labeledTerms <- cbind(labeledTerms,trainY$Tag)
library(plyr)
labeledTerms <- rename(labeledTerms,c("trainY$Tag"="Tag"))
#Build CART Model
CART = rpart(Tag ~., data=labeledTerms, method="class")
dtm = removeSparseTerms(dtm, 0.99)
labeledTerms = as.data.frame(as.matrix(dtm))
labeledTerms <- cbind(labeledTerms,trainY$Tag)
library(plyr)
labeledTerms <- rename(labeledTerms,c("trainY$Tag"="Tag"))
#Build CART Model
CART = rpart(Tag ~., data=labeledTerms, method="class")
CART
str(CART)
library(FactoMineR)
pcainfo <- PCA(subset(labeledTerms,select=-c(Tag)), ncp=100,graph = TRUE)
predictedCART <- predict(CART,labeledTerms,type='class')
head(predictedCART)
summary(predictedCART)
summary(trainY)
predictedCART <- cbind(predictedCART,trainY$Tag)
head(predictedCART)
table(predictedCART[,1],predictedCART[,2])
library(RTextTools);
# GET THE BREAST CANCER DATA FROM http://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/wdbc.names
data <- read.csv("http://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data",header=FALSE)
head(data)
dim(data)
data <- data[-1]
head(data)
# ADD TEXTUAL DESCRIPTORS FOR EACH MASS CHARACTERISTIC FOR THE DOCUMENT-TERM MATRIX
thick <- as.vector(apply(as.matrix(data[1], mode="character"),1,paste,"clump",sep="",collapse=""))
head(thick)
size <- as.vector(apply(as.matrix(data[2], mode="character"),1,paste,"size",sep="",collapse=""))
shape <- as.vector(apply(as.matrix(data[3], mode="character"),1,paste,"shape",sep="",collapse=""))
adhesion <- as.vector(apply(as.matrix(data[4], mode="character"),1,paste,"adhesion",sep="",collapse=""))
single <- as.vector(apply(as.matrix(data[5], mode="character"),1,paste,"single",sep="",collapse=""))
nuclei <- as.vector(apply(as.matrix(data[6], mode="character"),1,paste,"nuclei",sep="",collapse=""))
chromatin <- as.vector(apply(as.matrix(data[7], mode="character"),1,paste,"chromatin",sep="",collapse=""))
nucleoli <- as.vector(apply(as.matrix(data[8], mode="character"),1,paste,"nucleoli",sep="",collapse=""))
mitoses <- as.vector(apply(as.matrix(data[9], mode="character"),1,paste,"mitoses",sep="",collapse=""))
training_data <- cbind(data[10],thick,size,shape,adhesion,single,nuclei,chromatin,nucleoli,mitoses)
head(training_data)
# [OPTIONAL] SUBSET YOUR DATA TO GET A RANDOM SAMPLE
training_data <- training_data[sample(1:699,size=600,replace=FALSE),]
training_codes <- training_data[1]
training_data <- training_data[-1]
# CREATE A TERM-DOCUMENT MATRIX THAT REPRESENTS WORD FREQUENCIES IN EACH DOCUMENT
# WE WILL TRAIN ON THE Title and Subject COLUMNS
matrix <- create_matrix(training_data, language="english", removeNumbers=FALSE, stemWords=FALSE, removePunctuation=FALSE, weighting=weightTfIdf)
matrix
# CREATE A container THAT IS SPLIT INTO A TRAINING SET AND A TESTING SET
# WE WILL BE USING t(training_codes) AS THE CODE COLUMN. WE DEFINE A 200
# ARTICLE TRAINING SET AND A 400 ARTICLE TESTING SET.
container <- create_container(matrix,t(training_codes),trainSize=1:200, testSize=201:600,virgin=FALSE)
# THERE ARE TWO METHODS OF TRAINING AND CLASSIFYING DATA.
# ONE WAY IS TO DO THEM AS A BATCH (SEVERAL ALGORITHMS AT ONCE)
matrix <- create_matrix(training_data, language="english", removeNumbers=FALSE, stemWords=FALSE, removePunctuation=FALSE, weighting=weightTfIdf)
library(caTools)
library(tm)
library(rpart)
library(rpart.plot)
library(ROCR)
matrix <- create_matrix(training_data, language="english", removeNumbers=FALSE, stemWords=FALSE, removePunctuation=FALSE, weighting=weightTfIdf)
matrix
container <- create_container(matrix,t(training_codes),trainSize=1:200, testSize=201:600,virgin=FALSE)
models <- train_models(container, algorithms=c("SVM","GLMNET","TREE"))
results <- classify_models(container, models)
analytics <- create_analytics(container, results)
analytics@algorithm_summary
analytics@ensemble_summary
ver
?ver
??version
R.version.string
#Reading the training files
trainX <- read.table("C:/Nishant/Courses/BigData/data_train.txt",sep="\n", col.names=c("Text"), fill=FALSE, strip.white=TRUE,quote="")
trainY <- read.table("C:/Nishant/Courses/BigData/labels_train_original.txt",sep="\n", col.names=c("Tag"), fill=FALSE, strip.white=TRUE,quote="")
head(trainX)
head(trainY)
dim(trainX)
dim(trainY)
summary(trainY)
# Reading the validation files
validX <- read.table("C:/Nishant/Courses/BigData/data_valid.txt",sep="\n", col.names=c("Text"), fill=FALSE, strip.white=TRUE,quote="")
validY <- read.table("C:/Nishant/Courses/BigData/labels_valid_original.txt",sep="\n", col.names=c("Tag"), fill=FALSE, strip.white=TRUE,quote="")
dim(validX)
dim(validY)
summary(validY)
library(RTextTools)
trainX <- read.table("C:/Nishant/Courses/BigData/data_train.txt",sep="\n", col.names=c("Text"), fill=FALSE, strip.white=TRUE,quote="")
trainY <- read.table("C:/Nishant/Courses/BigData/labels_train_original.txt",sep="\n", col.names=c("Tag"), fill=FALSE, strip.white=TRUE,quote="")
head(trainX)
head(trainY)
dim(trainX)
dim(trainY)
summary(trainY)
corpus <- Corpus(VectorSource(trainX$Text))
# Pre-process data
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, stemDocument)
library(rJava)
library(caTools)
library(tm)
library(rpart)
library(rpart.plot)
library(ROCR)
library(RTextTools)
corpus <- Corpus(VectorSource(trainX$Text))
# Pre-process data
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, stemDocument)
dtm <- create_matrix(trainX$Text, language="english", minDocFreq=1, maxDocFreq=Inf,
minWordLength=3, maxWordLength=Inf, ngramLength=1, originalMatrix=NULL,
removeNumbers=FALSE, removePunctuation=TRUE, removeSparseTerms=0,
removeStopwords=TRUE, stemWords=FALSE, stripWhitespace=TRUE, toLower=TRUE,
weighting=weightTf)
head(dtm)
labeledTerms = as.data.frame(as.matrix(dtm))
head(labeledTerms)
dtm = removeSparseTerms(dtm, 0.99)
labeledTerms = as.data.frame(as.matrix(dtm))
head(labeledTerms)
dtm <- create_matrix(trainX$Text, language="english", ngramLength=3, removeNumbers=TRUE, removePunctuation=TRUE, removeSparseTerms=0,
stemWords=TRUE, stripWhitespace=TRUE, toLower=TRUE)
dtm = removeSparseTerms(dtm, 0.99)
labeledTerms = as.data.frame(as.matrix(dtm))
head(labeledTerms)
dtm <- create_matrix(trainX$Text, language="english", ngramLength=3, removeNumbers=TRUE, removePunctuation=TRUE, removeSparseTerms=0,
stemWords=TRUE, stripWhitespace=TRUE, toLower=TRUE,minWordLength=1, maxWordLength=3)
dtm <- create_matrix(trainX$Text, language="english", ngramLength=1, removeNumbers=TRUE, removePunctuation=TRUE, removeSparseTerms=0,
stemWords=TRUE, stripWhitespace=TRUE, toLower=TRUE,minWordLength=1, maxWordLength=3)
dtm = removeSparseTerms(dtm, 0.99)
# Create data frame
labeledTerms = as.data.frame(as.matrix(dtm))
head(labeledTerms)
View(labeledTerms)
View(labeledTerms)
labeledTerms[-1]
labeledTerms <- labeledTerms[,2:229]
View(labeledTerms)
View(labeledTerms)
labeledTerms <- labeledTerms[,2:229]
View(labeledTerms)
View(labeledTerms)
dtm <- create_matrix(trainX$Text, language="english", ngramLength=1, removeNumbers=TRUE, removePunctuation=TRUE, removeSparseTerms=0,
stemWords=TRUE, stripWhitespace=TRUE, toLower=TRUE,minWordLength=1, maxWordLength=inf)
dtm <- create_matrix(trainX$Text, language="english", ngramLength=3, removeNumbers=TRUE, removePunctuation=TRUE, removeSparseTerms=0,
stemWords=TRUE, stripWhitespace=TRUE, toLower=TRUE,minWordLength=1, maxWordLength=Inf)
labeledTerms = as.data.frame(as.matrix(dtm))
dtm = removeSparseTerms(dtm, 0.9999)
labeledTerms = as.data.frame(as.matrix(dtm))
dtm = removeSparseTerms(dtm, 0.99)
labeledTerms = as.data.frame(as.matrix(dtm))
head(labeledTerms)
labeledTerms <- labeledTerms[-c(1)]
head(labeledTerms)
View(labeledTerms)
View(labeledTerms)
dtm = removeSparseTerms(dtm, 0.99)
labeledTerms = as.data.frame(as.matrix(dtm))
labeledTerms <- cbind(labeledTerms,trainY$Tag)
?rownames
rownames(labeledTerms, do.NULL = TRUE, prefix = "row")
library(plyr)
labeledTerms <- rename(labeledTerms,c("trainY$Tag"="Tag"))
#Build CART Model
CART = rpart(Tag ~., data=labeledTerms, method="class")
CART
predictedCART <- predict(CART,labeledTerms,type='class')
predictedCART <- cbind(predictedCART,trainY$Tag)
head(predictedCART)
table(predictedCART[,1],predictedCART[,2])
names(predictedCART)[2] <- "Tag"
#Reading the training files
trainX <- read.table("C:/Nishant/Courses/BigData/data_train.txt",sep="\n", col.names=c("Text"), fill=FALSE, strip.white=TRUE,quote="")
trainY <- read.table("C:/Nishant/Courses/BigData/labels_train_original.txt",sep="\n", col.names=c("Tag"), fill=FALSE, strip.white=TRUE,quote="")
head(trainX)
head(trainY)
dim(trainX)
dim(trainY)
summary(trainY)
# Reading the validation files
validX <- read.table("C:/Nishant/Courses/BigData/data_valid.txt",sep="\n", col.names=c("Text"), fill=FALSE, strip.white=TRUE,quote="")
validY <- read.table("C:/Nishant/Courses/BigData/labels_valid_original.txt",sep="\n", col.names=c("Tag"), fill=FALSE, strip.white=TRUE,quote="")
dim(validX)
dim(validY)
summary(validY)
library(rJava)
library(caTools)
library(tm)
library(rpart)
library(rpart.plot)
library(ROCR)
library(RTextTools)
View(accuracy)
View(accuracy)
#Reading the training files
trainX <- read.table("C:/Nishant/Courses/BigData/data_train.txt",sep="\n", col.names=c("Text"), fill=FALSE, strip.white=TRUE,quote="")
trainY <- read.table("C:/Nishant/Courses/BigData/labels_train_original.txt",sep="\n", col.names=c("Tag"), fill=FALSE, strip.white=TRUE,quote="")
head(trainX)
head(trainY)
dim(trainX)
dim(trainY)
summary(trainY)
# Reading the validation files
validX <- read.table("C:/Nishant/Courses/BigData/data_valid.txt",sep="\n", col.names=c("Text"), fill=FALSE, strip.white=TRUE,quote="")
validY <- read.table("C:/Nishant/Courses/BigData/labels_valid_original.txt",sep="\n", col.names=c("Tag"), fill=FALSE, strip.white=TRUE,quote="")
dim(validX)
dim(validY)
summary(validY)
library(rJava)
library(caTools)
library(tm)
library(rpart)
library(rpart.plot)
library(ROCR)
library(RTextTools)
corpus <- Corpus(VectorSource(trainX$Text))
# Pre-process data
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, stemDocument)
# Create matrix
dtm1 <- create_matrix(trainX$Text, language="english", ngramLength=1, removeNumbers=TRUE, removePunctuation=TRUE, removeSparseTerms=0,
stemWords=TRUE, stripWhitespace=TRUE, toLower=TRUE,minWordLength=1, maxWordLength=Inf)
dtm2 <- create_matrix(trainX$Text, language="english", ngramLength=2, removeNumbers=TRUE, removePunctuation=TRUE, removeSparseTerms=0,
stemWords=TRUE, stripWhitespace=TRUE, toLower=TRUE,minWordLength=1, maxWordLength=Inf)
dtm3 <- create_matrix(trainX$Text, language="english", ngramLength=3, removeNumbers=TRUE, removePunctuation=TRUE, removeSparseTerms=0,
stemWords=TRUE, stripWhitespace=TRUE, toLower=TRUE,minWordLength=1, maxWordLength=Inf)
# Remove sparse terms
dtm1 <- removeSparseTerms(dtm1, 0.99)
dtm2 <- removeSparseTerms(dtm2, 0.99)
dtm3 <- removeSparseTerms(dtm3, 0.99)
# Create data frame
labeledTerms1 <- as.data.frame(as.matrix(dtm1))
labeledTerms2 <- as.data.frame(as.matrix(dtm2))
labeledTerms3 <- as.data.frame(as.matrix(dtm3))
labeledTerms <- cbind(labeledTerms1,labeledTerms2,labeledTerms3)
rownames(labeledTerms) <- NULL
head(labeledTerms)
# Add in the outcome variable
labeledTerms <- cbind(labeledTerms,trainY$Tag)
library(plyr)
labeledTerms <- rename(labeledTerms,c("trainY$Tag"="Tag"))
#Build CART Model
CART = rpart(Tag ~., data=labeledTerms, method="class")
CART
str(CART)
varlist <- colnames(labeledTerms)
varlist
predictedCART <- predict(CART,labeledTerms,type='class')
predictedCART <- cbind(predictedCART,trainY$Tag)
head(predictedCART)
table(predictedCART[,1],predictedCART[,2])
colnames(predictedCART) <- c("predicted_train","Tag")
head(predictedCART)
predictedCART_1 <- as.data.frame(predictedCART)
library(sqldf)
accuracy <- sqldf("select cast((100* sum(case when predicted_train == Tag then 1 end)/count(*)) as decimal(10,2)) [Accuracy]
from predictedCART_1")
accuracy
# Valdiation
# Create matrix
dtm1 <- create_matrix(validX$Text, language="english", ngramLength=1, removeNumbers=TRUE, removePunctuation=TRUE, removeSparseTerms=0,
stemWords=TRUE, stripWhitespace=TRUE, toLower=TRUE,minWordLength=1, maxWordLength=Inf)
labeledTerms1 <- as.data.frame(as.matrix(dtm1))
labeledTerms1 <- labeledTerms1[,varlist]
#Reading the training files
trainX <- read.table("C:/Nishant/Courses/BigData/data_train.txt",sep="\n", col.names=c("Text"), fill=FALSE, strip.white=TRUE,quote="")
trainY <- read.table("C:/Nishant/Courses/BigData/labels_train_original.txt",sep="\n", col.names=c("Tag"), fill=FALSE, strip.white=TRUE,quote="")
head(trainX)
head(trainY)
dim(trainX)
dim(trainY)
summary(trainY)
# Reading the validation files
validX <- read.table("C:/Nishant/Courses/BigData/data_valid.txt",sep="\n", col.names=c("Text"), fill=FALSE, strip.white=TRUE,quote="")
validY <- read.table("C:/Nishant/Courses/BigData/labels_valid_original.txt",sep="\n", col.names=c("Tag"), fill=FALSE, strip.white=TRUE,quote="")
dim(validX)
dim(validY)
summary(validY)
library(rJava)
library(caTools)
library(tm)
library(rpart)
library(rpart.plot)
library(ROCR)
library(RTextTools)
corpus <- Corpus(VectorSource(trainX$Text))
# Pre-process data
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, stemDocument)
# Create matrix
dtm1 <- create_matrix(trainX$Text, language="english", ngramLength=1, removeNumbers=TRUE, removePunctuation=TRUE, removeSparseTerms=0,
stemWords=TRUE, stripWhitespace=TRUE, toLower=TRUE,minWordLength=1, maxWordLength=Inf)
dtm2 <- create_matrix(trainX$Text, language="english", ngramLength=2, removeNumbers=TRUE, removePunctuation=TRUE, removeSparseTerms=0,
stemWords=TRUE, stripWhitespace=TRUE, toLower=TRUE,minWordLength=1, maxWordLength=Inf)
dtm3 <- create_matrix(trainX$Text, language="english", ngramLength=3, removeNumbers=TRUE, removePunctuation=TRUE, removeSparseTerms=0,
stemWords=TRUE, stripWhitespace=TRUE, toLower=TRUE,minWordLength=1, maxWordLength=Inf)
# Remove sparse terms
dtm1 <- removeSparseTerms(dtm1, 0.99)
dtm2 <- removeSparseTerms(dtm2, 0.99)
dtm3 <- removeSparseTerms(dtm3, 0.99)
# Create data frame
labeledTerms1 <- as.data.frame(as.matrix(dtm1))
varlist1 <- colnames(labeledTerms1)
labeledTerms2 <- as.data.frame(as.matrix(dtm2))
varlist2 <- colnames(labeledTerms2)
labeledTerms3 <- as.data.frame(as.matrix(dtm3))
varlist3 <- colnames(labeledTerms3)
labeledTerms <- cbind(labeledTerms1,labeledTerms2,labeledTerms3)
rownames(labeledTerms) <- NULL
head(labeledTerms)
# Add in the outcome variable
labeledTerms <- cbind(labeledTerms,trainY$Tag)
library(plyr)
labeledTerms <- rename(labeledTerms,c("trainY$Tag"="Tag"))
#Build CART Model
CART = rpart(Tag ~., data=labeledTerms, method="class")
CART
str(CART)
predictedCART <- predict(CART,labeledTerms,type='class')
predictedCART <- cbind(predictedCART,trainY$Tag)
head(predictedCART)
table(predictedCART[,1],predictedCART[,2])
colnames(predictedCART) <- c("predicted_train","Tag")
head(predictedCART)
predictedCART_1 <- as.data.frame(predictedCART)
library(sqldf)
accuracy <- sqldf("select cast((100* sum(case when predicted_train == Tag then 1 end)/count(*)) as decimal(10,2)) [Accuracy]
from predictedCART_1")
accuracy
dtm1 <- create_matrix(validX$Text, language="english", ngramLength=1, removeNumbers=TRUE, removePunctuation=TRUE, removeSparseTerms=0,
stemWords=TRUE, stripWhitespace=TRUE, toLower=TRUE,minWordLength=1, maxWordLength=Inf)
labeledTerms1 <- as.data.frame(as.matrix(dtm1))
labeledTerms1 <- labeledTerms1[,varlist1]
dtm2 <- create_matrix(validX$Text, language="english", ngramLength=2, removeNumbers=TRUE, removePunctuation=TRUE, removeSparseTerms=0,
stemWords=TRUE, stripWhitespace=TRUE, toLower=TRUE,minWordLength=1, maxWordLength=Inf)
labeledTerms2 <- as.data.frame(as.matrix(dtm2))
labeledTerms2 <- labeledTerms1[,varlist2]
dtm3 <- create_matrix(validX$Text, language="english", ngramLength=3, removeNumbers=TRUE, removePunctuation=TRUE, removeSparseTerms=0,
stemWords=TRUE, stripWhitespace=TRUE, toLower=TRUE,minWordLength=1, maxWordLength=Inf)
labeledTerms3 <- as.data.frame(as.matrix(dtm3))
labeledTerms3 <- labeledTerms1[,varlist3]
rm(dtm2)
dtm2 <- create_matrix(validX$Text, language="english", ngramLength=2, removeNumbers=TRUE, removePunctuation=TRUE, removeSparseTerms=0,
stemWords=TRUE, stripWhitespace=TRUE, toLower=TRUE,minWordLength=1, maxWordLength=Inf)
labeledTerms2 <- as.data.frame(as.matrix(dtm2))
labeledTerms2 <- labeledTerms1[,varlist2]
rm(dtm1)
rm(dtm2)
rm(dtm3)
dtm2 <- create_matrix(validX$Text, language="english", ngramLength=2, removeNumbers=TRUE, removePunctuation=TRUE, removeSparseTerms=0,
stemWords=TRUE, stripWhitespace=TRUE, toLower=TRUE,minWordLength=1, maxWordLength=Inf)
labeledTerms2 <- as.data.frame(as.matrix(dtm2))
labeledTerms2 <- labeledTerms1[,varlist2]
rm(dtm2)
rm(dtm3)
install.packages("roxygen2")
publish_github(user = "nsinha0511", repo = "DataProducts")
library(devtools)
publish_github(user = "nsinha0511", repo = "DataProducts")
library(devtools)
library('slidify')
author("Dataproducts")
publish_github(user = "nsinha0511", repo = "DataProducts")
